name: Build and Dockerize

on:
  push:
    tags:
      - "*"
    branches:
      - main
      - "release/**"
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]

jobs:
  compute-version:
    name: Compute Version
    runs-on: ubuntu-latest
    outputs:
      semver: ${{ steps.gitversion.outputs.FullSemVer }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup GitVersion
        uses: gittools/actions/gitversion/setup@v3.2.1
      - name: Execute GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v3.2.1
        with:
          useConfigFile: false

  build-frontend:
    name: Build Frontend Application
    runs-on: ubuntu-latest
    needs: [compute-version]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Setup PNPM
        uses: pnpm/action-setup@v3
        with:
          version: latest
      - name: Install Dependencies
        working-directory: ./Loadlane.Web
        run: pnpm install
      - name: Versioning
        working-directory: ./Loadlane.Web
        run: |
          VERSION="${{ needs.compute-version.outputs.semver }}"
          echo "Setting version to $VERSION"
          npm pkg set version="$VERSION"
          cat package.json | grep version
      - name: Build Frontend
        working-directory: ./Loadlane.Web
        run: pnpm build
      - name: Upload Frontend Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: ./Loadlane.Web/dist
          retention-days: 1

  dockerize-frontend:
    name: Dockerize Frontend
    runs-on: ubuntu-latest
    needs: [build-frontend, compute-version]
    if: github.event_name == 'pull_request' || startsWith(github.ref, 'refs/heads/main') || startsWith(github.ref, 'refs/heads/release/') || startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Extract Docker Metadata
        id: docker-metadata
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/loadlane/frontend
          tags: |
            type=semver,pattern={{version}},value=${{ needs.compute-version.outputs.semver }}
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=pr-${{ github.event.number }},enable=${{ github.event_name == 'pull_request' }}
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}
      - name: Download Frontend Artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: ./Loadlane.Web/dist
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./Loadlane.Web
          file: ./Loadlane.Web/Dockerfile
          push: true
          tags: ${{ steps.docker-metadata.outputs.tags }}
          labels: ${{ steps.docker-metadata.outputs.labels }}

  build-webapi:
    name: Build .NET Web API
    runs-on: ubuntu-latest
    needs: [compute-version]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9
      - name: Restore Dependencies
        run: dotnet restore Loadlane.sln
      - name: Versioning
        run: echo "Setting version to ${{ needs.compute-version.outputs.semver }}"
      - name: Install EF Core Tools
        run: dotnet tool install --global dotnet-ef
      - name: Build Web API
        run: dotnet build Loadlane.sln --configuration Release --no-restore /p:Version=${{ needs.compute-version.outputs.semver }}
      - name: Publish Web API
        run: dotnet publish Loadlane.Api/Loadlane.Api.csproj --configuration Release --no-build --output ./publish /p:Version=${{ needs.compute-version.outputs.semver }}
      - name: Bundle EF Core Migrations
        run: dotnet ef migrations bundle --project Loadlane.Infrastructure/Loadlane.Infrastructure.csproj --startup-project Loadlane.Api/Loadlane.Api.csproj --configuration Release --output migration-bundle --runtime linux-x64 --self-contained
      - name: Upload Web API Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: webapi-publish
          path: ./publish
          retention-days: 1
      - name: Upload EF Core Migrations Bundle
        uses: actions/upload-artifact@v4
        with:
          name: ef-migrations-bundle
          path: ./migration-bundle
          retention-days: 5

  dockerize-webapi:
    name: Dockerize Web API
    runs-on: ubuntu-latest
    needs: [build-webapi, compute-version]
    if: github.event_name == 'pull_request' || startsWith(github.ref, 'refs/heads/main') || startsWith(github.ref, 'refs/heads/release/') || startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Extract Docker Metadata
        id: docker-metadata
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/loadlane/webapi
          tags: |
            type=semver,pattern={{version}},value=${{ needs.compute-version.outputs.semver }}
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=pr-${{ github.event.number }},enable=${{ github.event_name == 'pull_request' }}
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}
      - name: Download Web API Artifacts
        uses: actions/download-artifact@v4
        with:
          name: webapi-publish
          path: ./publish
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./publish
          file: ./Loadlane.Api/Dockerfile
          push: true
          tags: ${{ steps.docker-metadata.outputs.tags }}
          labels: ${{ steps.docker-metadata.outputs.labels }}

  dockerize-webapi-migration:
    name: Dockerize Database Migration Tool
    runs-on: ubuntu-latest
    needs: [build-webapi, compute-version]
    if: github.event_name == 'pull_request' || startsWith(github.ref, 'refs/heads/main') || startsWith(github.ref, 'refs/heads/release/') || startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Extract Docker Metadata
        id: docker-metadata
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/loadlane/webapi-migration
          tags: |
            type=semver,pattern={{version}},value=${{ needs.compute-version.outputs.semver }}
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=pr-${{ github.event.number }},enable=${{ github.event_name == 'pull_request' }}
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}
      - name: Download Migration Bundle
        uses: actions/download-artifact@v4
        with:
          name: ef-migrations-bundle
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./
          file: ./Loadlane.Api/Dockerfile.migration
          push: true
          tags: ${{ steps.docker-metadata.outputs.tags }}
          labels: ${{ steps.docker-metadata.outputs.labels }}
