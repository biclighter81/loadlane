// <auto-generated />
using System;
using Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Loadlane.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250917135558_AddDirectionsCacheKeyToOrder")]
    partial class AddDirectionsCacheKeyToOrder
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Loadlane.Domain.Entities.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_utc");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<decimal?>("Volume")
                        .HasPrecision(10, 3)
                        .HasColumnType("numeric(10,3)")
                        .HasColumnName("volume");

                    b.Property<decimal?>("Weight")
                        .HasPrecision(10, 3)
                        .HasColumnType("numeric(10,3)")
                        .HasColumnName("weight");

                    b.HasKey("Id")
                        .HasName("pk_articles");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_articles_name");

                    b.ToTable("articles", (string)null);
                });

            modelBuilder.Entity("Loadlane.Domain.Entities.Carrier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("contact_email");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("contact_phone");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_utc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_carriers");

                    b.HasIndex("ContactEmail")
                        .HasDatabaseName("ix_carriers_contact_email");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_carriers_name");

                    b.ToTable("carriers", (string)null);
                });

            modelBuilder.Entity("Loadlane.Domain.Entities.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_utc");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("file_path");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint")
                        .HasColumnName("file_size");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("mime_type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<Guid>("TransportId")
                        .HasColumnType("uuid")
                        .HasColumnName("transport_id");

                    b.HasKey("Id")
                        .HasName("pk_documents");

                    b.HasIndex("CreatedUtc")
                        .HasDatabaseName("ix_documents_created_utc");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_documents_name");

                    b.HasIndex("TransportId")
                        .HasDatabaseName("ix_documents_transport_id");

                    b.ToTable("documents", (string)null);
                });

            modelBuilder.Entity("Loadlane.Domain.Entities.Driver", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_utc");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("phone");

                    b.HasKey("Id")
                        .HasName("pk_drivers");

                    b.HasIndex("Email")
                        .HasDatabaseName("ix_drivers_email");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasDatabaseName("ix_drivers_phone");

                    b.ToTable("drivers", (string)null);
                });

            modelBuilder.Entity("Loadlane.Domain.Entities.Gate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_utc");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("number");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uuid")
                        .HasColumnName("warehouse_id");

                    b.HasKey("Id")
                        .HasName("pk_gates");

                    b.HasIndex("Number")
                        .HasDatabaseName("ix_gates_number");

                    b.HasIndex("WarehouseId")
                        .HasDatabaseName("ix_gates_warehouse_id");

                    b.HasIndex("WarehouseId", "Number")
                        .IsUnique()
                        .HasDatabaseName("ix_gates_warehouse_number_unique");

                    b.ToTable("gates", (string)null);
                });

            modelBuilder.Entity("Loadlane.Domain.Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("city");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_utc");

                    b.Property<string>("HouseNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("house_no");

                    b.Property<double>("Latitude")
                        .HasPrecision(10, 8)
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasPrecision(11, 8)
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("post_code");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("street");

                    b.HasKey("Id")
                        .HasName("pk_locations");

                    b.HasIndex("Latitude", "Longitude")
                        .HasDatabaseName("ix_locations_coordinates");

                    b.ToTable("locations", (string)null);
                });

            modelBuilder.Entity("Loadlane.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uuid")
                        .HasColumnName("article_id");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_utc");

                    b.Property<string>("DirectionsCacheKey")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("directions_cache_key");

                    b.Property<string>("ExtOrderNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("ext_order_no");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.HasIndex("ArticleId")
                        .HasDatabaseName("ix_orders_article_id");

                    b.HasIndex("ExtOrderNo")
                        .IsUnique()
                        .HasDatabaseName("ix_orders_ext_order_no");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("Loadlane.Domain.Entities.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<double>("Latitude")
                        .HasPrecision(10, 8)
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasPrecision(11, 8)
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<Guid>("TransportId")
                        .HasColumnType("uuid")
                        .HasColumnName("transport_id");

                    b.HasKey("Id")
                        .HasName("pk_positions");

                    b.HasIndex("Date")
                        .HasDatabaseName("ix_positions_date");

                    b.HasIndex("TransportId")
                        .HasDatabaseName("ix_positions_transport_id");

                    b.HasIndex("Latitude", "Longitude")
                        .HasDatabaseName("ix_positions_coordinates");

                    b.ToTable("positions", (string)null);
                });

            modelBuilder.Entity("Loadlane.Domain.Entities.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_utc");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_tenants");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_tenants_is_active");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_tenants_name_unique");

                    b.ToTable("tenants", (string)null);
                });

            modelBuilder.Entity("Loadlane.Domain.Entities.Transport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("AcceptedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("accepted_utc");

                    b.Property<Guid?>("CarrierId")
                        .HasColumnType("uuid")
                        .HasColumnName("carrier_id");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_utc");

                    b.Property<Guid?>("DestinationId")
                        .HasColumnType("uuid")
                        .HasColumnName("destination_id");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<DateTime?>("RejectedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("rejected_utc");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("rejection_reason");

                    b.Property<Guid?>("StartId")
                        .HasColumnType("uuid")
                        .HasColumnName("start_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.Property<string>("TransportId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("transport_id");

                    b.Property<Guid?>("VehicleId")
                        .HasColumnType("uuid")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id")
                        .HasName("pk_transports");

                    b.HasIndex("CarrierId")
                        .HasDatabaseName("ix_transports_carrier_id");

                    b.HasIndex("DestinationId")
                        .HasDatabaseName("ix_transports_destination_id");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_transports_order_id");

                    b.HasIndex("StartId")
                        .HasDatabaseName("ix_transports_start_id");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_transports_status");

                    b.HasIndex("TransportId")
                        .IsUnique()
                        .HasDatabaseName("ix_transports_transport_id");

                    b.HasIndex("VehicleId")
                        .HasDatabaseName("ix_transports_vehicle_id");

                    b.ToTable("transports", (string)null);
                });

            modelBuilder.Entity("Loadlane.Domain.Entities.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_utc");

                    b.Property<Guid?>("DriverId")
                        .HasColumnType("uuid")
                        .HasColumnName("driver_id");

                    b.Property<string>("LicencePlate")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("licence_plate");

                    b.Property<string>("LicencePlate2")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("licence_plate2");

                    b.HasKey("Id")
                        .HasName("pk_vehicles");

                    b.HasIndex("DriverId")
                        .HasDatabaseName("ix_vehicles_driver_id");

                    b.HasIndex("LicencePlate")
                        .IsUnique()
                        .HasDatabaseName("ix_vehicles_licence_plate");

                    b.ToTable("vehicles", (string)null);
                });

            modelBuilder.Entity("Loadlane.Domain.Entities.Warehouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_utc");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("location_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("Organisation")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("organisation");

                    b.HasKey("Id")
                        .HasName("pk_warehouses");

                    b.HasIndex("LocationId")
                        .HasDatabaseName("ix_warehouses_location_id");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_warehouses_name");

                    b.HasIndex("Organisation")
                        .HasDatabaseName("ix_warehouses_organisation");

                    b.ToTable("warehouses", (string)null);
                });

            modelBuilder.Entity("Loadlane.Domain.Entities.Waypoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("ActualArrival")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("actual_arrival");

                    b.Property<DateTime?>("ActualDeparture")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("actual_departure");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_utc");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("location_id");

                    b.Property<DateTime?>("PlannedArrival")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("planned_arrival");

                    b.Property<string>("WaypointType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("waypoint_type");

                    b.HasKey("Id")
                        .HasName("pk_waypoints");

                    b.HasIndex("LocationId")
                        .HasDatabaseName("ix_waypoints_location_id");

                    b.ToTable("waypoints", (string)null);

                    b.HasDiscriminator<string>("WaypointType").HasValue("Waypoint");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Loadlane.Domain.Entities.Destination", b =>
                {
                    b.HasBaseType("Loadlane.Domain.Entities.Waypoint");

                    b.HasDiscriminator().HasValue("Destination");
                });

            modelBuilder.Entity("Loadlane.Domain.Entities.Start", b =>
                {
                    b.HasBaseType("Loadlane.Domain.Entities.Waypoint");

                    b.HasDiscriminator().HasValue("Start");
                });

            modelBuilder.Entity("Loadlane.Domain.Entities.Stopp", b =>
                {
                    b.HasBaseType("Loadlane.Domain.Entities.Waypoint");

                    b.Property<Guid?>("NextStoppId")
                        .HasColumnType("uuid")
                        .HasColumnName("next_stopp_id");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("integer")
                        .HasColumnName("sequence_number");

                    b.Property<Guid?>("TransportId")
                        .HasColumnType("uuid")
                        .HasColumnName("transport_id");

                    b.HasIndex("NextStoppId")
                        .HasDatabaseName("ix_waypoints_next_stopp_id");

                    b.HasIndex("SequenceNumber")
                        .HasDatabaseName("ix_stopps_sequence_number");

                    b.HasIndex("TransportId")
                        .HasDatabaseName("ix_waypoints_transport_id");

                    b.HasDiscriminator().HasValue("Stopp");
                });

            modelBuilder.Entity("Loadlane.Domain.Entities.Document", b =>
                {
                    b.HasOne("Loadlane.Domain.Entities.Transport", "Transport")
                        .WithMany("Documents")
                        .HasForeignKey("TransportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_documents_transports_transport_id");

                    b.Navigation("Transport");
                });

            modelBuilder.Entity("Loadlane.Domain.Entities.Gate", b =>
                {
                    b.HasOne("Loadlane.Domain.Entities.Warehouse", "Warehouse")
                        .WithMany("Gates")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_gates_warehouses_warehouse_id");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Loadlane.Domain.Entities.Order", b =>
                {
                    b.HasOne("Loadlane.Domain.Entities.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_orders_articles_article_id");

                    b.Navigation("Article");
                });

            modelBuilder.Entity("Loadlane.Domain.Entities.Position", b =>
                {
                    b.HasOne("Loadlane.Domain.Entities.Transport", "Transport")
                        .WithMany("Positions")
                        .HasForeignKey("TransportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_positions_transports_transport_id");

                    b.Navigation("Transport");
                });

            modelBuilder.Entity("Loadlane.Domain.Entities.Transport", b =>
                {
                    b.HasOne("Loadlane.Domain.Entities.Carrier", "Carrier")
                        .WithMany("Transports")
                        .HasForeignKey("CarrierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_transports_carriers_carrier_id");

                    b.HasOne("Loadlane.Domain.Entities.Destination", "Destination")
                        .WithMany()
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_transports_destinations_destination_id");

                    b.HasOne("Loadlane.Domain.Entities.Order", "Order")
                        .WithMany("Transports")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_transports_orders_order_id");

                    b.HasOne("Loadlane.Domain.Entities.Start", "Start")
                        .WithMany()
                        .HasForeignKey("StartId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_transports_starts_start_id");

                    b.HasOne("Loadlane.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("Transports")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_transports_vehicles_vehicle_id");

                    b.Navigation("Carrier");

                    b.Navigation("Destination");

                    b.Navigation("Order");

                    b.Navigation("Start");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Loadlane.Domain.Entities.Vehicle", b =>
                {
                    b.HasOne("Loadlane.Domain.Entities.Driver", "Driver")
                        .WithMany("Vehicles")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_vehicles_drivers_driver_id");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("Loadlane.Domain.Entities.Warehouse", b =>
                {
                    b.HasOne("Loadlane.Domain.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_warehouses_locations_location_id");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Loadlane.Domain.Entities.Waypoint", b =>
                {
                    b.HasOne("Loadlane.Domain.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_waypoints_locations_location_id");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Loadlane.Domain.Entities.Stopp", b =>
                {
                    b.HasOne("Loadlane.Domain.Entities.Stopp", "NextStopp")
                        .WithMany()
                        .HasForeignKey("NextStoppId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_waypoints_waypoints_next_stopp_id");

                    b.HasOne("Loadlane.Domain.Entities.Transport", null)
                        .WithMany("Stopps")
                        .HasForeignKey("TransportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_waypoints_transports_transport_id");

                    b.Navigation("NextStopp");
                });

            modelBuilder.Entity("Loadlane.Domain.Entities.Carrier", b =>
                {
                    b.Navigation("Transports");
                });

            modelBuilder.Entity("Loadlane.Domain.Entities.Driver", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Loadlane.Domain.Entities.Order", b =>
                {
                    b.Navigation("Transports");
                });

            modelBuilder.Entity("Loadlane.Domain.Entities.Transport", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Positions");

                    b.Navigation("Stopps");
                });

            modelBuilder.Entity("Loadlane.Domain.Entities.Vehicle", b =>
                {
                    b.Navigation("Transports");
                });

            modelBuilder.Entity("Loadlane.Domain.Entities.Warehouse", b =>
                {
                    b.Navigation("Gates");
                });
#pragma warning restore 612, 618
        }
    }
}
